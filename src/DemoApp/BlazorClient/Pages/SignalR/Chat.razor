@page "/blazor/signalr/chat"

@using BlazorApp.Client.Models
@using Microsoft.AspNetCore.SignalR.Client
@using System.Net
@inject UserInfo  userInfo
@inject NavigationManager NavigationManager

<div class="form-group">
    <label>
        User: @userInfo.Name
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(string.IsNullOrEmpty(userInfo.Name) || !IsConnected)">Send</button>
<button @onclick="ClearChatBoard" disabled="@(string.IsNullOrEmpty(userInfo.Name) || !IsConnected)">Clear chat board</button>
@if (string.IsNullOrEmpty(userInfo.Name) || !IsConnected)
{
<button @onclick="Login">Login</button>
}

<hr>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection _hubConnection;
    private List<string> _messages = new List<string>();
    private string _messageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        _hubConnection.On<string>("ReceiveOnlineNotice", user =>
        {
            _messages.Add($"{user} online");
            StateHasChanged();
        });

        _hubConnection.On<string>("ReceiveOfflineNotice", user =>
        {
            _messages.Add($"{user} offline");
            StateHasChanged();
        });

        _hubConnection.On<string>("ReceiveClearChatBoardCommand", user =>
        {
            _messages.Clear();
            _messages.Add($"{user} cleared chat board");
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    void Login() => NavigationManager.NavigateTo($"{NavigationManager.ToAbsoluteUri("/Identity/Account/Login").ToString()}?returnUrl={WebUtility.UrlEncode("/blazor/signalr/chat")}", true);

    Task Send() 
    {
        var task = _hubConnection.SendAsync("SendMessage", _messageInput);
        _messageInput = string.Empty;

        return task;
    }

    Task ClearChatBoard() =>  _hubConnection.SendAsync("SendClearOnlineUsersChatBoardCommand");

    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;
}